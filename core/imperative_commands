Create an NGINX Pod

kubectl run --generator=run-pod/v1 nginx --image=nginx



Generate POD Manifest YAML file (-o yaml). Don't create it(--dry-run)

kubectl run --generator=run-pod/v1 nginx --image=nginx --dry-run -o yaml



Create a deployment

kubectl create deployment --image=nginx nginx



Generate Deployment YAML file (-o yaml). Don't create it(--dry-run)

kubectl create deployment --image=nginx nginx --dry-run -o yaml



Generate Deployment YAML file (-o yaml). Don't create it(--dry-run) with 4 Replicas (--replicas=4)

kubectl create deployment --image=nginx nginx --dry-run -o yaml > nginx-deployment.yaml

Save it to a file, make necessary changes to the file (for example, adding more replicas) and then create the deployment.


kubectl run nginx-pod --generator=run-pod/v1 --image=nginx:alpine


Core
========
kubectl run nginx --image=nginx

alias k=kubectl
alias kgp='kubectl get pods'

kgp
kgs
kgn

apiVersion: v1 /apps/v1
kind:
metadata:    ---- Dictionary
  name:
  labels:
      app: 
      type: 

spec:
 containers:                ----- List/Array
   -name: nginx-container
    image: 


pods commands:

check default namespace pods

create a new pod using nginx
kubectl run nginx --image=nginx --generator=run-pod/v1
kubectl run nginx --image-nginx --generator=run-pod/v1

Describe the pod
Delete the pod
Events and Reason
Describe

create the image with the redis and image name redis123

replace with edit or yaml with apply


ReplicationController / ReplicationSet
======================================
with the template from the pod
replicas

apiVersion: apps/v1
kind: ReplicationSet
metdata:
  name: 
spec:
 template: 
    metdata: 
 replicas: 
 selector:
   matchLabels:
      type: 

alias k='kubectl'
alias kgp='kubectl get po' 


httpd-frontend; Replicas: 3; Image: httpd:2.4-alpine

k create deployment --image=httpd:2.4-alpine 

kubectl create deployment --image=httpd:2.4-alpine httpd-frontend --dry-run -o yaml

/var/www/html/api/storage/logs/*.log


Name: webapp-service; Type: NodePort; targetPort: 8080; port: 8080; nodePort: 30080; selector: simple-webapp

apiVersion: v1
kind: Service 
metdata: 
  name: webapp-service

spec:
    type: NodePort 

apiVersion: v1
kind: Service
metadata:
  name:webapp-service
spec:
  type: NodePort
  ports:
    - targetPort: 8080
      port: 8080
      nodePort: 30080
  selector:
    name: simple-webapp


Name: nginx-pod
Image: nginx:alpine

kubectl run nginx-pod --generator=run-pod/v1 --image=nginx:alpine

Deploy a redis pod using the redis:alpine image with the labels set to tier=db.


Either use imperative commands to create the pod with the labels. Or else use imperative commands to generate the pod definition file, then add the labels before creating the pod using the file.

kubectl run --generator=run-pod/v1 redis --image=redis:alpine -l tier=db

kubectl run redis --image=redis:alpine --generator=run-pod/v1 -l tier=db


kubectl expose pod redis --port=6379 --name redis-service


kubectl expose pod redis --port=6379 --name redis-service


Use the command kubectl create deployment webapp --image=kodekloud/webapp-color. The scale the webapp to 3 using command kubectl scale deployment/webapp --replicas=3



kubectl create deployment webapp --image=kodekloud/webapp-color --dry-run -o yaml >demo.yaml

Run the command 
kubectl expose deployment webapp --type=NodePort --port=8080 --name=webapp-service --dry-run -o yaml > webapp-service.yaml 


o generate a service definition file. Then edit the nodeport in it and create a service.

























